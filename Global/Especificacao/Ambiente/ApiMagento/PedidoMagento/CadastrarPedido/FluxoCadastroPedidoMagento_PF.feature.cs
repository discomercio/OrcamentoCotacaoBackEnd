// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Especificacao.Ambiente.ApiMagento.PedidoMagento.CadastrarPedido
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Ambiente.ApiMagento.PedidoMagento.CadastrarPedido")]
    public partial class FLuxoCadastroPedidoMagento_PFFeature : object, Xunit.IClassFixture<FLuxoCadastroPedidoMagento_PFFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Ambiente.ApiMagento.PedidoMagento.CadastrarPedido"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FluxoCadastroPedidoMagento_PF.feature"
#line hidden
        
        public FLuxoCadastroPedidoMagento_PFFeature(FLuxoCadastroPedidoMagento_PFFeature.FixtureData fixtureData, Especificacao_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FLuxoCadastroPedidoMagento - PF", "============================\r\nFluxo Magento:\r\nP10_Cliente: \r\n\t\t01 - Normaliza CPF" +
                    ": \r\n\t\t\t\t> remove pontuações do CPF\r\n\t\t\t02 - Validar se cliente é PF, só aceitamo" +
                    "s cliente PF.\r\n\t\t\t03 - Truncar o campo complemento do endereço de entrega: \r\n\t\t\t" +
                    "\t> Se complemento do endereço de entrega for maior que Constantes.MAX_TAMANHO_CA" +
                    "MPO_ENDERECO_COMPLEMENTO, \r\n\t\t\t\t\tiremos passar o valor para nfe_Texto_Constar.\t\t" +
                    "\t\r\n\t\t\t04 - Verificar ponto de referência: \r\n\t\t\t\t> Se ponto de referência for dif" +
                    "erente de complemento do endereço de entrega, adicionamos o valor \r\n\t\t\t\t\tpara o " +
                    "campo nfe_Texto_Constar.\r\n\t\t\t05 - Mover endereço de entrega para Dados cadastrai" +
                    "s:\r\n\t\t\t\t> Validamos se tem endereço de entrega que é obrigatório.\r\n\t\t\t\t> Exigimo" +
                    "s que o CPF do endereço de entrega seja igual ao CPF do pedido.\r\n\t\t\t06 - Verific" +
                    "ar se cliente existe e cadastrar cliente:\r\n\t\t\t\t> Buscamos o cliente na base de d" +
                    "ados, se existir retornamos.\r\n\t\t\t\t> Caso não exista, cadastramos o cliente. \r\nP2" +
                    "0_Indicador: Se tiver valor de frete significa que tem indicador.\r\n\t\t\t01 - Verif" +
                    "icar se tem indicador e valida indicador:\r\n\t\t\t\t> Se tiver valor de frete, então " +
                    "inserimos o indicador do appsettings. \r\n\t\t\t\t> Validamos se o indicador existe na" +
                    " base de dados.\r\n\t\t\t02 - Verificar se loja existe\r\n\t\t\t\t> Validamos se a loja que" +
                    " esta no appsettings existe na base de dados.\r\nP30_InfPedido:\r\n\t\t\t01 - Validar p" +
                    "edido magento, código de origem e pedido marketplace:\r\n\t\t\t\t> Validamos se o códi" +
                    "go de origem do pedido magento esta preenchido.\r\n\t\t\t\t> Validamos na base de dado" +
                    "s se o código de origem existe na base de dados.\r\n\t\t\t\t> Validamos se o pedido ma" +
                    "gento esta preenchido.\r\n\t\t\t\t> Validamos se a quantidade de caracteres é diferent" +
                    "e de Constantes.MAX_TAMANHO_ID_PEDIDO_MAGENTO\r\n\t\t\t\t> Validamos se o pedido magen" +
                    "to contém somente números.\r\nP40_Produtos: \r\n\t\tPRECISAMOS CRIAR OS NOVOS TESTES P" +
                    "ARA PRODUTO COMPOSTO E DILUIÇÃO DO VALOR DE FRETE ENTRE OS PRODUTOS\r\n\t\t\t01 - Ver" +
                    "ificar se produto é composto e buscar os produtos que compõe o produto composto\r" +
                    "\n\t\t\t02 - Alterar os produtos compostos para simples\r\n\t\t\t03 - Ajustar a quantidad" +
                    "e e valores de produtos repetidos\r\n\t\t\t04 - Remover produtos duplicados\r\n\t\t\t05 - " +
                    "Diluir o valor de frete entre os produtos\r\n\t\t\t06 - Buscar valor de coeficiente d" +
                    "os produtos\r\n\t\t\t07 - Buscar a sigla da forma de pagto\r\n\t\t\t08 - Montar a lista de" +
                    " coeficientes\r\n\t\t\t09 - Buscar os produtos especificos\r\n\t\t\t10 - Converter os prod" +
                    "utos magento para PedidoCriacaoProdutoDados e inserir os valores\r\nP50_Pedido:\r\n\t" +
                    "\tO teste de criação de pedido magento esta no cenário \"salvando o pedido base\" l" +
                    "ocalizado nesse arquivo\r\n\t\tTodos os teste acima passam por esse fluxo, sendo ass" +
                    "im está garantido que estamos executando esse teste\r\n\t\t\t01 - Converter pedido pa" +
                    "ra PedidoCriacaoDados:\r\n\t\t\t\t01 - Converte Endereco Cadastral para DadosClienteCa" +
                    "dastroDados:\r\n\t\t\t\t\t> Cliente PF: Produtor Rural = 1 (Não), Contribuinte ICMS = 0" +
                    " (Inicial), IE = vazio.\r\n\t\t\t\t02 - Converter EnderecoCadastralClienteMagentoDto p" +
                    "ara EnderecoCadastralClientePrepedidoDados:\r\n\t\t\t\t03 - Converter EnderecoEntregaC" +
                    "lienteMagentoDto para EnderecoEntregaClienteCadastroDados:\r\n\t\t\t\t04 - Converter F" +
                    "ormaPagtoCriacaoMagentoDto para FormaPagtoCriacaoDados:\r\n\t\t\t\t\t> Só aceitamos os " +
                    "pagamentos Á vista, Parcela Única, Parcelado no Cartão\r\n\t\t\t\t\t\r\nP60_Cadastrar Ped" +
                    "idoCriacaoDados \r\n============================", ProgrammingLanguage.CSharp, new string[] {
                        "Ambiente.ApiMagento.PedidoMagento.CadastrarPedido"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="salvando o pedido base")]
        [Xunit.TraitAttribute("FeatureTitle", "FLuxoCadastroPedidoMagento - PF")]
        [Xunit.TraitAttribute("Description", "salvando o pedido base")]
        public virtual void SalvandoOPedidoBase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("salvando o pedido base", null, tagsOfScenario, argumentsOfScenario);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
 testRunner.Given("Pedido base", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
 testRunner.Then("Sem nenhum erro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fluxo de cadastro do magento")]
        [Xunit.TraitAttribute("FeatureTitle", "FLuxoCadastroPedidoMagento - PF")]
        [Xunit.TraitAttribute("Description", "Fluxo de cadastro do magento")]
        public virtual void FluxoDeCadastroDoMagento()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fluxo de cadastro do magento", null, tagsOfScenario, argumentsOfScenario);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 66
 testRunner.Given("Esta é a especificação, está sendo testado em outros .feature", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FLuxoCadastroPedidoMagento_PFFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FLuxoCadastroPedidoMagento_PFFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
