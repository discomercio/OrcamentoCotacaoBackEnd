// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Especificacao.Ambiente.ApiMagento.PedidoMagento.CadastrarPedido
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FLuxoCadastroPedidoMagento_PJFeature : object, Xunit.IClassFixture<FLuxoCadastroPedidoMagento_PJFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "FluxoCadastroPedidoMagento_PJ.feature"
#line hidden
        
        public FLuxoCadastroPedidoMagento_PJFeature(FLuxoCadastroPedidoMagento_PJFeature.FixtureData fixtureData, Especificacao_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "FLuxoCadastroPedidoMagento - PJ", @"Resumo: magento não aceita PJ

magento: problema no cadastro de PJ, vai puxar do estoque errado se for contribuinte de ICMS.
Hoje não usa, mas é importante ter o recurso.
O problema é: se a gente presumir o ICMS da PJ, vamos criar o pedido pegando do estoque errado.
Hamilton vai conversar com Karina para saber como funciona. Mas é um BELO problema.

Boa tarde
Edu  conversei com a Karina e ficou decidido que neste primeiro momento a integração com o Magento 
não irá tratar os pedidos de clientes PJ. Esses pedidos continuarão sendo cadastrados através do 
processo semi-automático. Então creio que seria melhor fazer normalmente a validação do campo de 
contribuinte ICMS para rejeitar os pedidos que vierem sem essa informação p/ garantir a consistência 
dos dados caso seja enviado um pedido de cliente PJ.

Conversei com o time e pegando alguns pontos que eles comentaram é melhor seguir com semi-automático mesmo e no futuro se surgir alguma ideia ou solução a gente adapta. 

Resumo: API do Magento para PJ não aceita nenhum pedido, tods serão feitos no semi-automático", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fluxo de cadastro do magento - PJ - não é aceito")]
        [Xunit.TraitAttribute("FeatureTitle", "FLuxoCadastroPedidoMagento - PJ")]
        [Xunit.TraitAttribute("Description", "Fluxo de cadastro do magento - PJ - não é aceito")]
        [Xunit.TraitAttribute("Category", "Ambiente.ApiMagento.PedidoMagento.CadastrarPedido.EspecificacaoAdicional")]
        public virtual void FluxoDeCadastroDoMagento_PJ_NaoEAceito()
        {
            string[] tagsOfScenario = new string[] {
                    "Ambiente.ApiMagento.PedidoMagento.CadastrarPedido.EspecificacaoAdicional"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fluxo de cadastro do magento - PJ - não é aceito", null, tagsOfScenario, argumentsOfScenario);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
 testRunner.Given("Pedido base cliente PJ", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.Then("Erro \"A API somente aceita pedidos para PF.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fluxo de cadastro do magento - PJ - para quando for implementado")]
        [Xunit.TraitAttribute("FeatureTitle", "FLuxoCadastroPedidoMagento - PJ")]
        [Xunit.TraitAttribute("Description", "Fluxo de cadastro do magento - PJ - para quando for implementado")]
        public virtual void FluxoDeCadastroDoMagento_PJ_ParaQuandoForImplementado()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fluxo de cadastro do magento - PJ - para quando for implementado", @"Ao cadastrar o cliente:
- se for PJ, deixar o pedido st_etg_imediata = 1 (não)
	e colocar Endereco_contribuinte_icms_status = inicial, Endereco_ie = vazio
Entrega Imediata
Se o cliente for PJ, sempre colocar com entrega imediata NÃO

Endereço
Se o cliente for PJ, será feita a comparação do endereço de entrega com o endereço de cobrança. Se forem iguais, descartar o endereço de entrega. Se forem diferentes, assumir que há endereço de entrega a ser usado.

Se for PJ, se endereço de entrega for igual do endeereço de cobrança, apaga o endereço de entrega.
	Comparação de endereço: qualquer campo diferente é diferente (inclusive complemento)
Depois disso, se o cliente não existir, cadastrar com o endereço de cobrança

Contribuinte ICMS
Para cliente PJ, quando o cliente for cadastrado automaticamente, manter o campo contribuinte_icms_status com o status default (zero).

centro de dsitribuição: o magento tem mas não usamos. Nem vamos expor esse flag.", tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FLuxoCadastroPedidoMagento_PJFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FLuxoCadastroPedidoMagento_PJFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
