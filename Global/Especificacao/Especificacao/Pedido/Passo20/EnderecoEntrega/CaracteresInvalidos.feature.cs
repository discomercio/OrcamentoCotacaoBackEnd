// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.3.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Especificacao.Especificacao.Pedido.Passo20.EnderecoEntrega
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "Especificacao.Pedido.Passo20.EnderecoEntrega")]
    public partial class EnderecoEntregaCaracteresInvalidosFeature : object, Xunit.IClassFixture<EnderecoEntregaCaracteresInvalidosFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Especificacao.Pedido.Passo20.EnderecoEntrega"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CaracteresInvalidos.feature"
#line hidden
        
        public EnderecoEntregaCaracteresInvalidosFeature(EnderecoEntregaCaracteresInvalidosFeature.FixtureData fixtureData, Especificacao_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EnderecoEntrega CaracteresInvalidos", null, ProgrammingLanguage.CSharp, new string[] {
                        "Especificacao.Pedido.Passo20.EnderecoEntrega"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="CaracteresInvalidos")]
        [Xunit.TraitAttribute("FeatureTitle", "EnderecoEntrega CaracteresInvalidos")]
        [Xunit.TraitAttribute("Description", "CaracteresInvalidos")]
        [Xunit.InlineDataAttribute("EndEtg_endereco", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("EndEtg_endereco_numero", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("EndEtg_endereco_complemento", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("EndEtg_bairro", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("EndEtg_cidade", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("EndEtg_nome", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        public virtual void CaracteresInvalidos(string campo, string erro, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campo", campo);
            argumentsOfScenario.Add("erro", erro);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CaracteresInvalidos", null, tagsOfScenario, argumentsOfScenario);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
 testRunner.Given("Pedido base com endereço de entrega", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.When(string.Format("Informo \"{0}\" = \"Carater inválido: €\"", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 40
 testRunner.Then(string.Format("Erro \"{0}\"", erro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Given("Pedido base com endereço de entrega", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When(string.Format("Informo \"{0}\" = \"Carater inválido: £\"", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.Then(string.Format("Erro \"{0}\"", erro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.Given("Pedido base com endereço de entrega", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When(string.Format("Informo \"{0}\" = \"Texto\"", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then(string.Format("Sem erro \"{0}\"", erro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="CaracteresInvalidos fora API Magento")]
        [Xunit.TraitAttribute("FeatureTitle", "EnderecoEntrega CaracteresInvalidos")]
        [Xunit.TraitAttribute("Description", "CaracteresInvalidos fora API Magento")]
        [Xunit.InlineDataAttribute("Endereco_rg", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_nome", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_logradouro", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_numero", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_complemento", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_bairro", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_cidade", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_contato", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_Email", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        [Xunit.InlineDataAttribute("Endereco_EmailXml", "regex .*POSSUI UM OU MAIS CARACTERES INVÁLIDOS.*", new string[0])]
        public virtual void CaracteresInvalidosForaAPIMagento(string campo, string erro, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("campo", campo);
            argumentsOfScenario.Add("erro", erro);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CaracteresInvalidos fora API Magento", null, tagsOfScenario, argumentsOfScenario);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
 testRunner.Given("Ignorar cenário no ambiente \"Ambiente.ApiMagento.PedidoMagento.CadastrarPedido.Ca" +
                        "dastrarPedido\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
 testRunner.Given("Pedido base", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
 testRunner.When(string.Format("Informo \"{0}\" = \"Carater inválido: €\"", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then(string.Format("Erro \"{0}\"", erro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Given("Pedido base", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.When(string.Format("Informo \"{0}\" = \"Carater inválido: £\"", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then(string.Format("Erro \"{0}\"", erro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
 testRunner.Given("Pedido base", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
 testRunner.When(string.Format("Informo \"{0}\" = \"Texto\"", campo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then(string.Format("Sem erro \"{0}\"", erro), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.3.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                EnderecoEntregaCaracteresInvalidosFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                EnderecoEntregaCaracteresInvalidosFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
