@model Loja.UI.Models.Acesso.LoginViewModel
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject Loja.Bll.ClienteBll.ClienteBll clienteBll
@inject Loja.Bll.Bll.AcessoBll.UsuarioAcessoBll usuarioAcessoBll
@inject Loja.Bll.Util.Configuracao configuracao
@inject Microsoft.Extensions.Logging.ILogger<Loja.Bll.Bll.AcessoBll.UsuarioLogado> loggerUsuarioLogado
@using Newtonsoft.Json
@{
    ViewData["Title"] = "Login";
    ViewBag.PaginaDeLogin = true;
}


<br />
<br />
<br />
<br />
<br />

@{
    var usuarioLogado = new Loja.Bll.Bll.AcessoBll.UsuarioLogado(loggerUsuarioLogado, User, HttpContextAccessor.HttpContext.Session, clienteBll, usuarioAcessoBll, configuracao);
}


@using (Html.BeginForm("LoginSubmit", "Acesso", FormMethod.Post))
{
    @Html.HiddenFor(m => m.ReturnUrl)

    <div class="container centered" style="line-height: initial;">
        @if (Model.AcessoNegado)
        {
            <div class="row">
                <div class="col s4"></div>
                <div class="col s4">
                    Acesso negado: você deve fazer o login novamente. Por motivos de segurança, periodicamente
                    você deve refazer o login.
                    <br />
                    <br />
                    Se você acabou de fazer o login e continua a receber esta mensagem,
                    é possível que o seu usuário não possua autorização para acessar essa página.
                    Nesse caso, faça o login como outro usuário ou entre em contato com o administrador do sistema.
                </div>
                <div class="col s4"></div>
            </div>
        }


        @if (Model.LoginUsuarioRetorno?.Usuario_bloqueado ?? false)
        {
            <div class="row">
                <div class="col s4"></div>
                <div class="col s4">
                    Acesso negado: o seu usuário está bloqueado.
                    <br />
                    <br />
                    Entre em contato com o administrador do sistema.
                </div>
                <div class="col s4"></div>
            </div>
        }
        @if (Model.LoginUsuarioRetorno?.Loja_nao_existe ?? false)
        {
            <div class="row">
                <div class="col s4"></div>
                <div class="col s4">
                    Acesso negado: a loja especificada não existe.
                </div>
                <div class="col s4"></div>
            </div>
        }
        @if (Model.LoginUsuarioRetorno?.Loja_sem_acesso ?? false)
        {
            <div class="row">
                <div class="col s4"></div>
                <div class="col s4">
                    Acesso negado: seu usuário não tem acesso à loja especificada.
                    <br />
                    <br />
                    Faça o login com outra loja ou entre em contato com o administrador do sistema.
                </div>
                <div class="col s4"></div>
            </div>
        }

        <div class="row">
            <div class="col s4"></div>
            <div class="input-field col s4">
                @*//o browser pode preenhcer o formulário autoamticamente
                    para resolver, tirei o label*@
                <div style="height:1em;">Loja</div>
                <br />
                <div>@Html.TextBoxFor(m => m.Loja, new { @class = "form-control active", autofocus = "true" })</div>
            </div>
            <div class="col s4"></div>
        </div>
        <div class="row">
            <div class="col s4"></div>
            <div class="input-field col s4">
                @*//o browser pode preenhcer o formulário autoamticamente
                    para resolver, tirei o label*@
                <div style="height:1em;">Nome do usuário</div>
                <br />
                <div>@Html.TextBoxFor(m => m.Apelido, new { @class = "form-control active" })</div>
            </div>
            <div class="col s4"></div>
        </div>
        <div class="row">
            <div class="col s4"></div>
            <div class="input-field col s4">
                <div style="height:1em;">Senha</div>
                <br />
                @{
                    var estilos = "";
                    if (Model.ErroUsuarioSenha)
                    {
                        estilos = " validate invalid";
                    }
                }
                @Html.PasswordFor(m => m.Senha, new { @class = "form-control active " + estilos })
                <span class="helper-text" data-error="Nome de usuário ou senha incorretos."></span>
            </div>
            <div class="col s4"></div>
        </div>

        <div class="row">
            <div class="col s4"></div>
            <div class="col s4 center">
                *No momento, apenas o usuário está sendo verificado.
            </div>
            <div class="col s4"></div>
        </div>
        @if (Model.PermitirManterConectado)
        {
            <div class="row">
                <div class="col s4"></div>
                <div class="input-field col s4 center">
                    <label>
                        @Html.CheckBoxFor(m => m.ManterConectado, new { @class = "filled-in " + estilos })
                        <span>Manter conectado</span>
                    </label>
                    @*espacador*@
                </div>
                <div class="col s4"></div>
            </div>
        }

        <div class="row">
            <div class="col s4"></div>
            <div class="col s4 center">
                <div style="height:3em;"> </div>
                <button class="waves-effect waves-light btn-small"
                        type="submit">
                    Enviar
                </button>
            </div>
            <div class="col s4"></div>
        </div>
    </div>
}

